// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1_VTCA.Data;

#nullable disable

namespace Project1_VTCA.Migrations
{
    [DbContext(typeof(SneakerShopDbContext))]
    [Migration("20250614161113_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1_VTCA.Data.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Project1_VTCA.Data.CartItem", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ProductID", "Size");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("ParentID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Phong cách"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Thương hiệu"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Giày Lifestyle Kinh Điển",
                            ParentID = 1
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Giày Retro & Di Sản",
                            ParentID = 1
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Giày Chạy Bộ & Công Nghệ",
                            ParentID = 1
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Giày Chunky & Cá Tính",
                            ParentID = 1
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryType = "Product",
                            IsPromotion = false,
                            Name = "Giày Local Brand Đột Phá",
                            ParentID = 1
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Nike",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Adidas",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Converse",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 11,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Vans",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 12,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "New Balance",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 13,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Fila",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 14,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Biti's",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 15,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Ananas",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 16,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Puma",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 17,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Skechers",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 18,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "MLB",
                            ParentID = 2
                        },
                        new
                        {
                            CategoryID = 19,
                            CategoryType = "Brand",
                            IsPromotion = false,
                            Name = "Asics",
                            ParentID = 2
                        });
                });

            modelBuilder.Entity("Project1_VTCA.Data.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("AdminDecisionReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ApprovedByAdminID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCancellationReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RefundRequested")
                        .HasColumnType("bit");

                    b.Property<decimal>("ShippingDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("ApprovedByAdminID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project1_VTCA.Data.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("DiscountAmountPerUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderID", "ProductID", "Size");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderApplicability")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalQuantity")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Project1_VTCA.Data.ProductCategory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Project1_VTCA.Data.ProductSize", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "Size");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Promotion", b =>
                {
                    b.Property<int>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionID"));

                    b.Property<int?>("ApplicableCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicableGender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ApplicableProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicableSize")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("PromotionID");

                    b.HasIndex("ApplicableCategoryId");

                    b.HasIndex("ApplicableProductId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Project1_VTCA.Data.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalSpending")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Address", b =>
                {
                    b.HasOne("Project1_VTCA.Data.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project1_VTCA.Data.CartItem", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_VTCA.Data.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Category", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Order", b =>
                {
                    b.HasOne("Project1_VTCA.Data.User", "ApprovedByAdmin")
                        .WithMany("ApprovedOrders")
                        .HasForeignKey("ApprovedByAdminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project1_VTCA.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project1_VTCA.Data.OrderDetail", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_VTCA.Data.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_VTCA.Data.ProductCategory", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_VTCA.Data.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_VTCA.Data.ProductSize", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Promotion", b =>
                {
                    b.HasOne("Project1_VTCA.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("ApplicableCategoryId");

                    b.HasOne("Project1_VTCA.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ApplicableProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project1_VTCA.Data.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Project1_VTCA.Data.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApprovedOrders");

                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
